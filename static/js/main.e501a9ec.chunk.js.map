{"version":3,"sources":["constants/action-types.js","constants/game-constants.js","services/game-logic.js","redux/reducer.js","utils/utils.js","store/store.js","components/atoms/game-logo.js","components/atoms/status-image.js","components/atoms/status-image-container.js","components/atoms/number-of-lives.js","components/atoms/number-of-lives-container.js","components/atoms/name-progress.js","components/atoms/name-progress-container.js","components/atoms/button.js","components/molecules/buttons.js","components/molecules/buttons-container.js","redux/actions/actions.js","components/molecules/alphabet-buttons.js","components/molecules/alphabet-buttons-container.js","components/atoms/new-game-button.js","components/atoms/new-game-button-container.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","CHOSE_POKEMON_NAME","CHOSE_LETTER","pokemonList","alphabetLetters","baseUrl","process","images","logo","concat","background","heart","playing","won","lost","mappedProgress","chosenName","split","map","letter","gameLogic","choices","includes","replaceLetter","join","replace","lives","visualProgress","name","choseRandomPokemonName","_","sample","removeLife","choseLetter","Error","handleDuplicateChoice","push","reStart","isWon","isLost","isGameOver","initialState","hearts","nameProgress","imageStatus","isPlaying","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","choicesArray","payload","isGameWon","isGameLost","updateProgress","updateImageStatus","store","createStore","GameLogo","react_default","a","createElement","react_media","query","isMobile","alt","className","src","StatusImage","_ref","status","connect","NumberOfLives","numberOfLives","_loop","i","key","makeLives","NameProgress","progress","Button","props","onClick","children","Buttons","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickLetter","bind","assertThisInitialized","newChoices","setState","_this2","isButtonHidden","button","atoms_button","hiddenButton","React","Component","dispatch","AlphabetButtons","buttons_container","NewGameButton","App","es","style","game_logo","number_of_lives_container","status_image_container","name_progress_container","alphabet_buttons_container","new_game_button_container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAKeA,EALC,CACdC,mBAAoB,qBACpBC,aAAc,gBCFVC,EAAc,CAClB,OACA,aACA,WACA,QACA,QACA,WACA,WACA,WACA,YACA,aACA,YACA,YACA,aACA,WACA,UACA,YACA,aACA,aACA,WACA,WACA,WACA,SACA,UACA,UACA,QACA,SACA,QACA,YACA,YACA,UACA,UACA,UACA,QACA,QACA,aACA,YACA,YACA,YACA,WACA,SACA,UACA,SACA,SACA,UACA,QACA,SACA,UACA,UACA,QACA,WACA,SACA,YACA,WACA,UACA,aACA,YACA,SACA,QACA,UACA,aACA,UACA,OACA,SACA,WACA,UACA,SACA,aACA,UACA,UACA,SACA,SACA,YACA,UACA,UACA,SACA,WACA,SACA,YACA,WACA,SACA,UACA,OACA,SACA,UACA,MACA,SACA,UACA,KACA,MACA,WACA,YACA,WACA,WACA,YACA,SACA,UACA,UACA,OACA,QACA,WACA,UACA,UACA,YACA,SACA,UACA,SACA,WACA,UACA,YACA,YACA,SACA,UACA,WACA,UACA,SACA,WACA,WACA,UACA,SACA,UACA,YACA,YACA,UACA,SACA,UACA,OACA,WACA,UACA,WACA,WACA,UACA,UACA,WACA,UACA,SACA,UACA,SACA,YACA,aACA,WACA,WACA,UACA,WACA,aACA,YACA,UACA,SACA,YACA,SACA,aACA,UACA,aACA,SACA,SAGIC,EAAkB,CACtB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGIC,EAAUC,mBAEVC,EAAS,CACbC,KAAI,GAAAC,OAAKJ,EAAL,wBACJK,WAAU,GAAAD,OAAKJ,EAAL,0BACVM,MAAK,GAAAF,OAAKJ,EAAL,qBACLO,QAAO,GAAAH,OAAKJ,EAAL,+BACPQ,IAAG,GAAAJ,OAAKJ,EAAL,6BACHS,KAAI,GAAAL,OAAKJ,EAAL,6CC7LAU,EAAiB,SAACC,GAItB,OAHkBA,EAAWC,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","file":"static/js/main.e501a9ec.chunk.js","sourcesContent":["const ACTIONS = {\n  CHOSE_POKEMON_NAME: 'CHOSE_POKEMON_NAME',\n  CHOSE_LETTER: 'CHOSE_LETTER'\n};\n\nexport default ACTIONS;","const pokemonList = [\n  \"ABRA\",\n  \"AERODACTYL\",\n  \"ALAKAZAM\",\n  \"ALPHA\",\n  \"ARBOK\",\n  \"ARCANINE\",\n  \"ARTICUNO\",\n  \"BEEDRILL\",\n  \"BELLOSSOM\",\n  \"BELLSPROUT\",\n  \"BLASTOISE\",\n  \"BULBASAUR\",\n  \"BUTTERFREE\",\n  \"CATERPIE\",\n  \"CHANSEY\",\n  \"CHARIZARD\",\n  \"CHARMANDER\",\n  \"CHARMELEON\",\n  \"CLEFABLE\",\n  \"CLEFAIRY\",\n  \"CLOYSTER\",\n  \"CUBONE\",\n  \"DEWGONG\",\n  \"DIGLETT\",\n  \"DITTO\",\n  \"DODRIO\",\n  \"DODUO\",\n  \"DRAGONAIR\",\n  \"DRAGONITE\",\n  \"DRATINI\",\n  \"DROWZEE\",\n  \"DUGTRIO\",\n  \"EEVEE\",\n  \"EKANS\",\n  \"ELECTABUZZ\",\n  \"ELECTRODE\",\n  \"EXEGGCUTE\",\n  \"EXEGGUTOR\",\n  \"FARFETCH\",\n  \"FEAROW\",\n  \"FLAREON\",\n  \"GASTLY\",\n  \"GENGAR\",\n  \"GEODUDE\",\n  \"GLOOM\",\n  \"GOLBAT\",\n  \"GOLDEEN\",\n  \"GOLDUCK\",\n  \"GOLEM\",\n  \"GRAVELER\",\n  \"GRIMER\",\n  \"GROWLITHE\",\n  \"GYARADOS\",\n  \"HAUNTER\",\n  \"HITMONCHAN\",\n  \"HITMONLEE\",\n  \"HORSEA\",\n  \"HYPNO\",\n  \"IVYSAUR\",\n  \"JIGGLYPUFF\",\n  \"JOLTEON\",\n  \"JYNX\",\n  \"KABUTO\",\n  \"KABUTOPS\",\n  \"KADABRA\",\n  \"KAKUNA\",\n  \"KANGASKHAN\",\n  \"KINGLER\",\n  \"KOFFING\",\n  \"KRABBY\",\n  \"LAPRAS\",\n  \"LICKITUNG\",\n  \"MACHAMP\",\n  \"MACHOKE\",\n  \"MACHOP\",\n  \"MAGIKARP\",\n  \"MAGMAR\",\n  \"MAGNEMITE\",\n  \"MAGNETON\",\n  \"MANKEY\",\n  \"MAROWAK\",\n  \"MEGA\",\n  \"MEOWTH\",\n  \"METAPOD\",\n  \"MEW\",\n  \"MEWTWO\",\n  \"MOLTRES\",\n  \"MR\",\n  \"MUK\",\n  \"NIDOKING\",\n  \"NIDOQUEEN\",\n  \"NIDORINA\",\n  \"NIDORINO\",\n  \"NINETALES\",\n  \"ODDISH\",\n  \"OMANYTE\",\n  \"OMASTAR\",\n  \"ONIX\",\n  \"PARAS\",\n  \"PARASECT\",\n  \"PERSIAN\",\n  \"PIDGEOT\",\n  \"PIDGEOTTO\",\n  \"PIDGEY\",\n  \"PIKACHU\",\n  \"PINSIR\",\n  \"POLITOED\",\n  \"POLIWAG\",\n  \"POLIWHIRL\",\n  \"POLIWRATH\",\n  \"PONYTA\",\n  \"PORYGON\",\n  \"PRIMEAPE\",\n  \"PSYDUCK\",\n  \"RAICHU\",\n  \"RAPIDASH\",\n  \"RATICATE\",\n  \"RATTATA\",\n  \"RHYDON\",\n  \"RHYHORN\",\n  \"SANDSHREW\",\n  \"SANDSLASH\",\n  \"SCYTHER\",\n  \"SEADRA\",\n  \"SEAKING\",\n  \"SEEL\",\n  \"SHELLDER\",\n  \"SLOWBRO\",\n  \"SLOWKING\",\n  \"SLOWPOKE\",\n  \"SNORLAX\",\n  \"SPEAROW\",\n  \"SQUIRTLE\",\n  \"STARMIE\",\n  \"STARYU\",\n  \"TANGELA\",\n  \"TAUROS\",\n  \"TENTACOOL\",\n  \"TENTACRUEL\",\n  \"VAPOREON\",\n  \"VENOMOTH\",\n  \"VENONAT\",\n  \"VENUSAUR\",\n  \"VICTREEBEL\",\n  \"VILEPLUME\",\n  \"VOLTORB\",\n  \"VULPIX\",\n  \"WARTORTLE\",\n  \"WEEDLE\",\n  \"WEEPINBELL\",\n  \"WEEZING\",\n  \"WIGGLYTUFF\",\n  \"ZAPDOS\",\n  \"ZUBAT\"\n];\n\nconst alphabetLetters = [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z'\n];\n\nconst baseUrl = process.env.PUBLIC_URL;\n\nconst images = {\n  logo: `${baseUrl}/images/app-logo.png`,\n  background: `${baseUrl}/images/background.png`,\n  heart: `${baseUrl}/images/heart.png`,\n  playing: `${baseUrl}/images/gottaCatchEmAll.png`,\n  won: `${baseUrl}/images/happy-pikachu.png`,\n  lost: `${baseUrl}/images/sad-pikachu.png`\n};\n\nexport {\n  pokemonList,\n  alphabetLetters,\n  images\n};\n","import { pokemonList } from \"../constants/game-constants\";\nimport _ from 'lodash';\n\nconst replaceLetter = (letter) => gameLogic.choices.includes(letter) ? letter : '_'\n\nconst mappedProgress = (chosenName) => {\n  const splitName = chosenName.split('');\n  const mappedName = splitName.map(letter => replaceLetter(letter));\n  const joinedName = mappedName.join().replace(/,/g, '');\n  return joinedName;\n};\n\nconst handleDuplicateChoice = (choices, letter) => {\n  if (choices.includes(letter)) {\n    throw new Error('This letter was already chosen!');\n  }\n}\n\nconst gameLogic = {\n  lives: 6,\n  choices: [],\n\n  visualProgress: (name) => mappedProgress(name),\n\n  choseRandomPokemonName: () => _.sample(pokemonList),\n\n  removeLife: () => {\n    gameLogic.lives--;\n  },\n\n  choseLetter: (name, letter) => {\n    handleDuplicateChoice(gameLogic.choices, letter);\n    gameLogic.choices.push(letter);\n    if (!name.includes(letter)) { gameLogic.removeLife() };\n    return gameLogic.choices;\n  },\n\n  reStart: () => {\n    gameLogic.lives = 6;\n    gameLogic.choices = [];\n  },\n\n  isWon: (name) => name === gameLogic.visualProgress(name),\n\n  isLost: (name) => gameLogic.lives === 0,\n\n  isGameOver: (name) => gameLogic.isWon(name) || gameLogic.isLost(name)\n};\n\nexport default gameLogic;\n","import ACTIONS from \"../constants/action-types\";\nimport gameLogic from \"../services/game-logic\";\nimport { updateImageStatus } from '../../src/utils/utils'\n\nconst {\n  lives,\n  choices,\n  choseRandomPokemonName,\n  visualProgress,\n  choseLetter,\n  isWon,\n  isLost,\n  reStart\n} = gameLogic;\n\nconst initialState = {\n  name: '',\n  choices,\n  hearts: lives,\n  nameProgress: 'CLICK NEW GAME',\n  imageStatus: 'playing',\n  isPlaying: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n\n    case ACTIONS.CHOSE_POKEMON_NAME:\n      reStart();\n      const chosenName = choseRandomPokemonName();\n      const nameProgress = visualProgress(chosenName);\n      return {\n        ...initialState,\n        name: chosenName,\n        nameProgress,\n        isPlaying: true\n      };\n\n    case ACTIONS.CHOSE_LETTER:\n      const choicesArray = choseLetter(state.name, action.payload);\n      const isGameWon = isWon(state.name);\n      const isGameLost = isLost(state.name);\n      const updateProgress = isGameLost ? state.name : visualProgress(state.name);\n      const isPlaying = !isGameWon && !isGameLost;\n\n      return {\n        ...state,\n        choices: choicesArray,\n        hearts: gameLogic.lives,\n        nameProgress: updateProgress,\n        imageStatus: updateImageStatus(isGameWon, isGameLost),\n        isPlaying\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import React from 'react';\nimport Media from 'react-media';\nimport { images } from \"../constants/game-constants\";\n\nconst makeLives = (numberOfLives) => {\n  const lives = [];\n  for (let i = 0; i < numberOfLives; i++) {\n    lives.push(\n      <Media query=\"(max-width: 640px)\">\n        {isMobile =>\n          <span key={i}>\n            <img src={images.heart} alt={`life-${i + 1}`}\n              className={isMobile ? 'App__heart--mobile' : null} />\n          </span>\n        }\n      </Media>);\n  }\n  return lives;\n}\n\nconst updateImageStatus = (isWon, isLost) => {\n  if (isWon) return 'won';\n  if (isLost) return 'lost';\n  return 'playing';\n};\n\nexport {\n  makeLives,\n  updateImageStatus\n};","import { createStore } from \"redux\";\nimport reducer from \"../redux/reducer\";\n\nconst store = createStore(reducer);\nexport default store;","import React from 'react';\nimport Media from 'react-media';\nimport { images } from \"../../constants/game-constants\";\n\nconst GameLogo = () =>\n  <Media query=\"(max-width: 640px)\">\n    {isMobile =>\n      <img\n        alt=\"Guillaume Pokemon Hangman logo\"\n        className={`App__logo ${isMobile ? \"App__logo--mobile\" : null}`}\n        src={images.logo} />\n    }\n  </Media>;\n\nexport default GameLogo;","import React from 'react';\nimport Media from 'react-media';\nimport PropTypes from 'prop-types';\nimport { images } from \"../../constants/game-constants\";\n\nconst StatusImage = ({ status }) =>\n  <Media query=\"(max-width: 640px)\">\n    {isMobile =>\n      <img\n        alt=\"status\"\n        className={isMobile ? \"App__status-image--mobile\" : null}\n        src={images[status]} />\n    }\n  </Media>;\n\nStatusImage.propTypes = {\n  status: PropTypes.string.isRequired\n};\n\nexport default StatusImage;","import { connect } from \"react-redux\";\nimport StatusImage from \"./status-image\";\n\nconst mapStateToProps = state => ({\n  status: state.imageStatus\n});\n\nexport default connect(mapStateToProps)(StatusImage);","import React from 'react';\nimport Media from 'react-media';\nimport PropTypes from 'prop-types';\nimport { makeLives } from '../../utils/utils';\n\nconst NumberOfLives = ({ lives }) =>\n  <Media query=\"(max-width: 640px)\">\n    {isMobile =>\n      <div\n        className={`App__lives ${isMobile ? \"App__lives--mobile\" : null}`}>\n        {makeLives(lives)}\n      </div>\n    }\n  </Media>;\n\nNumberOfLives.propTypes = {\n  lives: PropTypes.number.isRequired,\n};\n\nexport default NumberOfLives;","import { connect } from \"react-redux\";\nimport NumberOfLives from './number-of-lives';\n\nconst mapStateToProps = state => ({\n  lives: state.hearts\n});\n\nexport default connect(mapStateToProps)(NumberOfLives);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Media from 'react-media';\n\nconst NameProgress = ({ progress }) => (\n  <Media query=\"(max-width: 640px)\">\n    {isMobile =>\n      <div\n        className={`App__name-progress ${isMobile ? \"App__name-progress--mobile\" : null}`}>\n        {progress}\n      </div>\n    }\n  </Media>\n);\n\nNameProgress.propTypes = {\n  progress: PropTypes.string.isRequired,\n};\n\nexport default NameProgress;","import { connect } from \"react-redux\";\nimport NameProgress from './name-progress';\n\nconst mapStateToProps = state => ({\n  progress: state.nameProgress\n});\n\nexport default connect(mapStateToProps)(NameProgress);","import React from 'react';\nimport Media from 'react-media';\nimport PropTypes from 'prop-types';\n\nconst Button = (props) =>\n  <Media query=\"(max-width: 640px)\">\n    {isMobile =>\n      <button\n        onClick={props.onClick}\n        className={`${props.className} ${isMobile ? `${props.className}--mobile` : null}`}>\n        {props.children}\n      </button>\n    }\n  </Media>;\n\nexport default Button;\n\nButton.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};","import React from 'react';\nimport Media from 'react-media';\nimport PropTypes from 'prop-types';\nimport { alphabetLetters } from \"../../constants/game-constants\";\nimport Button from '../atoms/button';\n\nclass Buttons extends React.Component {\n  constructor(props) {\n    super();\n    this.clickLetter = this.clickLetter.bind(this);\n    this.state = {\n      choices: []\n    };\n  }\n\n  clickLetter(letter) {\n    const newChoices = this.state.choices;\n    newChoices.push(letter);\n    this.setState({\n      choices: newChoices\n    });\n    this.props.onClick(letter)\n  }\n\n  render() {\n    return alphabetLetters.map(letter => {\n      const isButtonHidden = this.state.choices.includes(letter);\n\n      const button =\n        <Media query=\"(max-width: 640px)\">\n          {isMobile =>\n            <Button\n              className={`App__alphabet-letter-button ${isMobile ? \"App__alphabet-letter-button--mobile\" : null}`}\n              key={letter}\n              children={letter}\n              onClick={() => this.clickLetter(letter)} />\n          }\n        </Media>;\n\n      const hiddenButton = (letter) =>\n        <Media query=\"(max-width: 640px)\">\n          {isMobile =>\n            <div\n              className={`App__alphabet-letter-hidden-button ${isMobile ? \"App__alphabet-letter-hidden-button--mobile\" : null}`}\n              key={letter}>\n              {letter}\n            </div>\n          }\n        </Media>;\n\n      return isButtonHidden ? hiddenButton(letter) : button;\n    })\n  };\n}\n\nButtons.propTypes = {\n  onClick: PropTypes.func.isRequired\n};\n\nexport default Buttons;","import { connect } from \"react-redux\";\nimport Buttons from './buttons';\nimport {\n  CHOSE_LETTER\n} from \"../../redux/actions/actions\";\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClick: letter => dispatch(CHOSE_LETTER(letter))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Buttons);","import ACTIONS from \"../../constants/action-types\";\n\nexport const CHOSE_POKEMON_NAME = name => ({\n  type: ACTIONS.CHOSE_POKEMON_NAME,\n  payload: name\n});\n\nexport const CHOSE_LETTER = letter => ({\n  type: ACTIONS.CHOSE_LETTER,\n  payload: letter\n});","import React from 'react';\nimport Media from 'react-media';\nimport PropTypes from 'prop-types';\nimport Buttons from './buttons-container';\n\nconst AlphabetButtons = ({ isPlaying }) =>\n  <Media query=\"(max-width: 640px)\">\n    {isMobile =>\n      <div className={`App__alphabet-letter-container ${isMobile ? \"App__alphabet-letter-container--mobile\" : null}`}>\n        {isPlaying ? <Buttons /> : <div className=\"App__alphabet-letter-container--display-none\" />}\n      </div>\n    }\n  </Media>;\n\nAlphabetButtons.propTypes = {\n  isPlaying: PropTypes.bool.isRequired\n};\n\nexport default AlphabetButtons;","import { connect } from \"react-redux\";\nimport AlphabetButtons from './alphabet-buttons';\n\nconst mapStateToProps = state => ({\n  isPlaying: state.isPlaying\n});\n\nexport default connect(mapStateToProps)(AlphabetButtons);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './button';\n\nconst NewGameButton = ({ isPlaying, onClick }) =>\n  !isPlaying && <Button\n    onClick={onClick}\n    className=\"App__new-game-button\"\n    children=\"New Game\" />;\n\nNewGameButton.propTypes = {\n  isPlaying: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n}\n\nexport default NewGameButton;","import { connect } from \"react-redux\";\nimport NewGameButton from './new-game-button';\nimport {\n  CHOSE_POKEMON_NAME\n} from \"../../redux/actions/actions\";\n\nconst mapStateToProps = state => ({\n  isPlaying: state.isPlaying\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClick: name => dispatch(CHOSE_POKEMON_NAME(name))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewGameButton);","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\nimport { images } from \"./constants/game-constants\";\nimport GameLogo from './components/atoms/game-logo';\nimport StatusImage from './components/atoms/status-image-container';\nimport NumberOfLives from './components/atoms/number-of-lives-container';\nimport NameProgress from './components/atoms/name-progress-container';\nimport AlphabetButtons from './components/molecules/alphabet-buttons-container';\nimport NewGameButton from './components/atoms/new-game-button-container';\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div\n          style={{ background: `url(${images.background})` }}\n          className=\"App\">\n          <GameLogo />\n          <NumberOfLives />\n          <StatusImage />\n          <NameProgress />\n          <AlphabetButtons />\n          <NewGameButton />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}